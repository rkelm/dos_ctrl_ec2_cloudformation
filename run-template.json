{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Runs an ec2 instance with a DOOD (Docker out of Docker) Docker container to control host's docker daemon from within a docker container.",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Can contain only ASCII characters."
        },
        "InstanceType": {
            "Description": "MC Server EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m5a.large",
                "m6a.large",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c5a.large",
                "c5a.xlarge",
                "c5a.2xlarge",
                "c5a.4xlarge",
                "c5a.8xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "MCLocation": {
            "Description": "The IPv4 address range that can be used to connect to MC Server",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
        },
        "SSHLocation": {
            "Description": "The IPv4 address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
        },
        "MCPort": {
            "Description": "TCP port to accept connections to MC Server on.",
            "Type": "String",
            "Default": "25565"
        },
        "DockerImage": {
            "Description": "Repo-name and tag of image to run.",
            "Type": "String"
        },
        "AMIImageId": {
            "Description": "ImageID of AMI to run on ec2 instance.",
            "Type": "String"
        },
        "HostSubdomain": {
            "Description": "Name of route53 recordset to assign to instance's public ip address. (Needs a dot at the end.)",
            "Type": "String",
            "Default": "host.domain.com."
        },
        "MCHostedZoneName": {
            "Description": "Name of the existing route53 hosted zone. As specified in the HostSubdomain parameter.",
            "Type": "String",
            "Default": "domain.com."
        },
        "ContainerVolumeRoot": {
            "Description": "Containers path to root with volumes.",
            "Type": "String",
            "Default": "/opt/mc_srv_ctrl"
        },
        "AWSTagKey": {
            "Description": "Tag key to identify ec2 instances.",
            "Type": "String"
        },
        "AWSTagValue": {
            "Description": "Tag value to identify ec2 instances.",
            "Type": "String"
        },
        "MapBucket": {
            "Description": "S3 Bucketname to use for MC data.",
            "Type": "String"
        },
        "RConPwd": {
            "Description": "Password for RCon Connection to MC server.",
            "Type": "String"
        },
        "BucketMapDir": {
            "Description": "Prefix to store maps in s3 bucket.",
            "Type": "String"
        },
        "DockerNamedVolumeMaps": {
            "Description": "Unique name of the docker named volume used to mount the container maps directory.",
            "Type": "String",
            "Default": "mc-map"
        },
        "StackAlias": {
            "Description": "Suffix for names of outputs created in this template.",
            "Type": "String",
            "MinLength": "1"
        }
    },
    "Conditions": {
        "AMIImageIdGiven": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AMIImageId"
                        },
                        ""
                    ]
                }
            ]
        },
        "KeyNameGiven": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        "",
                        {
                            "Ref": "KeyName"
                        }
                    ]
                }
            ]
        },
        "RConPwdGiven": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        "",
                        {
                            "Ref": "RConPwd"
                        }
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "HVM64"
            },
            "t2.nano": {
                "Arch": "HVM64"
            },
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            },
            "t2.large": {
                "Arch": "HVM64"
            },
            "m1.small": {
                "Arch": "HVM64"
            },
            "m1.medium": {
                "Arch": "HVM64"
            },
            "m1.large": {
                "Arch": "HVM64"
            },
            "m1.xlarge": {
                "Arch": "HVM64"
            },
            "m2.xlarge": {
                "Arch": "HVM64"
            },
            "m2.2xlarge": {
                "Arch": "HVM64"
            },
            "m2.4xlarge": {
                "Arch": "HVM64"
            },
            "m3.medium": {
                "Arch": "HVM64"
            },
            "m3.large": {
                "Arch": "HVM64"
            },
            "m3.xlarge": {
                "Arch": "HVM64"
            },
            "m3.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.large": {
                "Arch": "HVM64"
            },
            "m4.xlarge": {
                "Arch": "HVM64"
            },
            "m4.2xlarge": {
                "Arch": "HVM64"
            },
            "m5a.large": {
                "Arch": "HVM64"
            },
            "m6a.large": {
                "Arch": "HVM64"
            },
            "c1.medium": {
                "Arch": "HVM64"
            },
            "c1.xlarge": {
                "Arch": "HVM64"
            },
            "c3.large": {
                "Arch": "HVM64"
            },
            "c3.xlarge": {
                "Arch": "HVM64"
            },
            "c3.2xlarge": {
                "Arch": "HVM64"
            },
            "c4.large": {
                "Arch": "HVM64"
            },
            "c4.xlarge": {
                "Arch": "HVM64"
            },
            "c4.2xlarge": {
                "Arch": "HVM64"
            },
            "c5a.large": {
                "Arch": "HVM64"
            },
            "c5a.xlarge": {
                "Arch": "HVM64"
            },
            "c5a.2xlarge": {
                "Arch": "HVM64"
            },
            "c5.large": {
                "Arch": "HVM64"
            },
            "c5.xlarge": {
                "Arch": "HVM64"
            },
            "c5.2xlarge": {
                "Arch": "HVM64"
            },
            "r3.large": {
                "Arch": "HVM64"
            },
            "r3.xlarge": {
                "Arch": "HVM64"
            },
            "r3.2xlarge": {
                "Arch": "HVM64"
            },
            "i2.xlarge": {
                "Arch": "HVM64"
            },
            "i2.2xlarge": {
                "Arch": "HVM64"
            },
            "d2.xlarge": {
                "Arch": "HVM64"
            },
            "d2.2xlarge": {
                "Arch": "HVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "HVM64": "ami-01cc34ab2709337aa"
            },
            "us-west-2": {
                "HVM64": "ami-0e5b6b6a9f3db6db8"
            },
            "us-west-1": {
                "HVM64": "ami-0e0bf4b3a0c0e0adc"
            },
            "eu-west-1": {
                "HVM64": "ami-0ed961fa828560210"
            },
            "eu-west-2": {
                "HVM64": "ami-074771aa49ab046e7"
            },
            "eu-west-3": {
                "HVM64": "ami-0da7ba92c3c072475"
            },
            "eu-central-1": {
                "HVM64": "ami-047e03b8591f2d48a"
            },
            "ap-northeast-1": {
                "HVM64": "ami-02d36247c5bc58c23"
            },
            "ap-northeast-2": {
                "HVM64": "ami-04e8dfc09b22389ad"
            },
            "ap-northeast-3": {
                "HVM64": "ami-026107638e7d599b1"
            },
            "ap-southeast-1": {
                "HVM64": "ami-07191cf2912e097a6"
            },
            "ap-southeast-2": {
                "HVM64": "ami-04a81599b183d7908"
            },
            "ap-south-1": {
                "HVM64": "ami-041db4a969fe3eb68"
            },
            "us-east-2": {
                "HVM64": "ami-0f19d220602031aed"
            },
            "ca-central-1": {
                "HVM64": "ami-0d8ad3ab25e7abc51"
            },
            "sa-east-1": {
                "HVM64": "ami-07983613af1a3ef44"
            }
        },
    },
    "Resources": {
        "McServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access via port 20 and MC Server access via parameterized value",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": {
                            "Ref": "MCPort"
                        },
                        "ToPort": {
                            "Ref": "MCPort"
                        },
                        "CidrIp": {
                            "Ref": "MCLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            }
        },
        "McServerInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "Comment1": "Install docker engine",
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "InstallAndRun": [
                            "Install",
                            "Prepare",
                            "Run"
                        ]
                    },
                    "Install": {
                        "packages": {
                            "yum": {
                                "docker": []
                            }
                        },
                        "files": {
                            "/opt/app/readme.md": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "This file was placed by the Cloud Formation template."
                                        ]
                                    ]
                                },
                                "mode": "000600",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "docker": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    },
                    "Prepare": {
                        "files": {
                            "/opt/app/docker_env_file": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "AWS_TAGKEY=",
                                            {
                                                "Ref": "AWSTagKey"
                                            },
                                            "\nAWS_TAGVALUE=",
                                            {
                                                "Ref": "AWSTagValue"
                                            },
                                            "\nMAP_BUCKET=",
                                            {
                                                "Ref": "MapBucket"
                                            },
                                            "\nBUCKET_MAP_DIR=",
                                            {
                                                "Ref": "BucketMapDir"
                                            },
                                            {
                                                "Fn::If": [
                                                    "RConPwdGiven",
                                                    {
                                                        "Fn::Join": [
                                                            "",
                                                            [
                                                                "\nRCONPWD=",
                                                                {
                                                                    "Ref": "RConPwd"
                                                                }
                                                            ]
                                                        ]
                                                    },
                                                    ""
                                                ]
                                            },
                                            "\nHOST_NAMEDVOLUME_MAPS=",
                                            {
                                                "Ref": "DockerNamedVolumeMaps"
                                            },
                                            "\nHOST_MCPORT=",
                                            {
                                                "Ref": "MCPort"
                                            },
                                            "\nREGION=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000600",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                            }
                        },
                        "commands": {
                            "01_add_ec_user_to_docker_group": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "usermod -a -G docker ec2-user"
                                        ]
                                    ]
                                }
                            },
                            "02_set_default_logdriver_to_awslogs": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sed -i \"s/^OPTIONS=\\\"/OPTIONS=\\\"--log-driver=awslogs --log-opt awslogs-group=",
                                            {
                                                "Fn::ImportValue": {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "MCRunLogGroup-",
                                                            {
                                                                "Ref": "StackAlias"
                                                            }
                                                        ]
                                                    ]
                                                }
                                            },
                                            " --log-opt tag='{{ with split .ImageName \\\\\\\\\\\":\\\\\\\\\\\" }}{{join . \\\\\\\\\\\"_\\\\\\\\\\\"}}{{end}}-{{.ID}}'",
                                            " /\" /etc/sysconfig/docker"
                                        ]
                                    ]
                                }
                            },
                            "03_restart_docker_service": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "systemctl restart docker"
                                        ]
                                    ]
                                }
                            },
                            "04_test_docker": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "su ec2-user -lc \"docker run hello-world\""
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "Run": {
                        "commands": {
                            "01_ecr_login": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$( aws ecr get-login --no-include-email --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " )"
                                        ]
                                    ]
                                }
                            },
                            "02_run_image": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "docker run -d ",
                                            " --name base-container",
                                            " --env-file=/opt/app/docker_env_file",
                                            " --log-driver=awslogs",
                                            " --log-opt awslogs-group=",
                                            {
                                                "Fn::ImportValue": {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "MCRunLogGroup-",
                                                            {
                                                                "Ref": "StackAlias"
                                                            }
                                                        ]
                                                    ]
                                                }
                                            },
                                            " --log-opt tag='{{ with split .ImageName \":\" }}{{join . \"_\"}}{{end}}-{{.ID}}'",
                                            " --mount source=",
                                            {
                                                "Ref": "DockerNamedVolumeMaps"
                                            },
                                            ",target=",
                                            {
                                                "Ref": "ContainerVolumeRoot"
                                            },
                                            "/map_data",
                                            " -v /var/run/docker.sock:/var/run/docker.sock",                                            
                                            " ",
                                            {
                                                "Ref": "DockerImage"
                                            },
                                            " ",
                                            {
                                                "Ref": "ContainerVolumeRoot"
                                            },
                                            "/bin/run_dummy_process.sh"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::If": [
                        "AMIImageIdGiven",
                        {
                            "Ref": "AMIImageId"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSRegionArch2AMI",
                                {
                                    "Ref": "AWS::Region"
                                },
                                {
                                    "Fn::FindInMap": [
                                        "AWSInstanceType2Arch",
                                        {
                                            "Ref": "InstanceType"
                                        },
                                        "Arch"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "McServerSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Fn::If": [
                        "KeyNameGiven",
                        {
                            "Ref": "KeyName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "IamInstanceProfile": {
                    "Fn::ImportValue": {
                        "Fn::Join": [
                            "",
                            [
                                "MCDockerRunnerInstanceProfile-",
                                {
                                    "Ref": "StackAlias"
                                }
                            ]
                        ]
                    }
                },
                "Tags": [
                    {
                        "Key": {
                            "Ref": "AWSTagKey"
                        },
                        "Value": {
                            "Ref": "AWSTagValue"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "# yum install -y aws-cfn-bootstrap # Should be preinstalled on current Amazon Linus AMIs.\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource McServerInstance ",
                                "         --configsets InstallAndRun ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "HostDNSRecord": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": {
                    "Ref": "MCHostedZoneName"
                },
                "Name": {
                    "Ref": "HostSubdomain"
                },
                "Type": "A",
                "TTL": "60",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "McServerInstance",
                            "PublicIp"
                        ]
                    }
                ]
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Description": "Subdomain of new instance: ",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "ssh:",
                        {
                            "Fn::GetAtt": [
                                "McServerInstance",
                                "PublicDnsName"
                            ]
                        }
                    ]
                ]
            }
        }
    }
}
