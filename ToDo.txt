# To-Do:

* Show connection string with port number after loading a map.

* Add ECHO remark at the end of prepare batch that now the Minecraft runner aws iam user or its iam group 
should be connected to the three new policies.

* Show & WatchLog timings for startup
	- Output time at beginn of start
	- Output time after start is finished
	- For loading maps
	- for starting instance
	- Log from client to cloudwatch & remove superflous messages to console.
		- cf_bootstrap.bat
		- cf_delete.bat

* Remove superflous comments
	- in cf_bootstrap.bat
	- other batch files

* Update example local config file
* Update example remote config file

* Auto create changes.txt from git comments.
	- In build script?
	- Create release.sh script?
	- Use make?

* Replace old values for AMIs with current Amzn Linux 2 AMI Ids.

* Release client tools
	- update srv_ctrl image tag in MCCD1
	- update shared installations of clients
	- Update MCD1 config to most current version tag for srv_ctrl_image.

* Add srv_ctrl image source to dos_ctrl_ec2_cloudformation?
	- Not good because its developed on different systems (linux vs. windows)
	  there will always be different working directories.
	  Or can this be changed? Mount path to vagrant instance?

* Rename git repository to something with minecraft server and ec2.


*** MMP Version ***
* Put schematics folder to s3 bucket. (Create s3 bucket in cloudformation template.)

* create public s3 bucket in separate cf template?
	- create test-buckets to not loose prod map overviews?
* auto upload index.html and empty map_ids2.txt to public bucket in prepare.cf or cf template?

* srv_ctrl_image: add flock to protect against parallel command execution
	- srv_ctrl_image: Wait till all commands are done before graceful shut down in run_dummy_process.sh.
	- srv_ctrl_image: Do not start any new commands, when graceful shutdown has been started.

* Setup html page for each important maps with links and information 

* For each map create a JSON file with information about the map.
	- information from composer.yml file
		- remove composer.yml files
		- can app_cmd.sh also be removed?
				- communication using rcon or console?
	- name of map
	- subdomain

* Add tools to add, remove, change worlds (in python!)
	- update map_ids.txt from s3 inventory?
	- remove map from s3
	- copy map to new name
	- change a maps docker image
	- change a maps server.properties?
	- change what else?
	- view map s3 history (versioning)
	- revert map from s3 history (versioning)
	- add map a from local map files
		- vanilla
		- spigot
	- What more is needed?
	- Detection of running maps: Use map-id not subdomain as tag value in srv_ctrl:run_map.sh

- Add release number for images and tags
	- Add MC release number to name of image: mc_vanilla_1-13-2:1.2-beta
	- Or use combined tag? i.e. mc_vanilla:1.13.2_1.2-beta
		- Advantages: No need to create new repos, with new versions.

- Add badges to github readme.md's

- Check and complete readme.md's

- Create docker image for Paper Server to replace spigot.


*** Luxury Features ***
- Make DNSHOSTNAME optional in run_Template.json
- DockerRunnerPolicy: Supply route53 Resource as parameter (arn:aws:route53:::hostedzone/hosted zone ID)

- Test not defining a SSH Key
	- Remove SSH (Port20)  from security group if no key given.

- Remove rediculously oversized machines from template.

- Test prepare and unprepare of stack.

- Create Policy for AppRunner User in prepare-template.json
	- Limit ec2 and other Resources, Limit to resources defined in config? 
		-> After change prepare script must be called again and policy reassigned to user.
		=> Better not.
	- Pass SSM Role 
	{
    "Effect": "Allow",
    "Action": [
        "iam:ListRoles",
        "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::123456789012:role/my-role-for-XYZ"

- setup resource based policy 

* How to make creating docker images with certain mods easier?
	- user paper server
	- Which mods would be good?


*** Configuration management ***
- What to do with remaining parameters?
	- Create Batch file to create new configs with compatible software version numbers?
	  As part of setup_server.bat?
	- master configuration with code versions? (AMI IDs, etc.)
- save/secure configs
	- image building: /vagrant/set...
	- clients
	- How to distribute? Via s3, samba?
- Common config file.
	- contains docker image name -> take compose.yml out of map.tgz.
	- ?
- CF Template to create S3 Buckets -> move to overviewer project
	- mc-private/maps  (Keep secrets here?)
	- mc-render-cache/render-cache
	- mc-public/map-renders (Better keep map_ids.txt + configuration in separate Bucket?)
		- /resource-packs
		- /index.html
		- /map_ids.txt
		- /robots.txt

- Make docker image build scripts grab BuildTools, edti/guard.jars from personal archive directory
  not from local directory.


*** Other ***
- Setup Murmur server or use Discord?
https://hub.docker.com/r/goofball222/murmur/
https://octo.sh/container-library/murmur-docker
https://github.com/mattikus/docker-murmur

- Setup ECR

- Automate SNS notifaction at cf events via lambda filter
i.e.
https://aws.amazon.com/de/premiumsupport/knowledge-center/cloudformation-rollback-email/
https://github.com/claudiobizzotto/aws-cloudformation-notifications

- Add CraftBook Mod to server images

- Add IPv6 support.
   - security group
   - instance ssh
   - MC server

* test spigot map will not allow client connections, why? 
	- maybe its the spigot docker image?

* Allow Remote rcon connections 
	- Is rights management for different rcon users possible?

* Unicode conversion Problem in mcrcon?
C:\Users\Rober\work\aws_mc_srv\dos_ctrl_ec2_cloudformation>cf_send_cmd.bat TEST app_cmd.sh /help
Results in => 'charmap' codec can't encode character u'\ufffd' in position 0: character maps to <undefined>

* Autosave map to s3 in map dependent intervalls
* Send SNS notification "Server still running" in configurable intervalls (srv_ctrl env var from config file).

* Render_map.sh: Make number of lower tile layers to delete a parameter, currently the 2 layers are deleted.

* Explicitly create a dedicated VPC and subnets for running MC Server instead of using the default vpc and subnets.
* Does MCRenderTaskRole really need "Effect": "Allow", "Action": "batch:SubmitJob" ?
 
* docker_image_render_batch: use docker secret for google_api_key(env var GOOGLE_API_KEY_FILE)  (or remove if api key is redundant now)
* Create mcrunner user in cf prepare-template, save access key to config file?
* Common tag for all created resources of one config.
* Create docker repositories in prepare-template => images lost wenn recreated
* Create AWS test account
* docker image overviewer batch: automate mc client download depending on version requested
* batch file to check for updates & install automatically
	- Write Setup instructions
	- Upload script for package & configs
	- Check for Update on launching an instance

* Copy run-template.json to s3 and only allow creating stack with this template?
* Policy for user creating run-stack and role of created ec2 instance are mixed up. 
    => Copy to two policies and then reduce permissions in each.

RunnerPolicy removed:
                        {
                            "Effect": "Allow",
                            "Action": "ec2:RunInstances",
                            "Resource": [
                                "arn:aws:ec2:::image/ami-*"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "ec2:Owner": "amazon"
                                }
                            }
                        },     
						                        {
                            "Effect": "Allow",
                            "Action": "ec2:RunInstances",
                            "Resource": [
                                "arn:aws:ec2::*:instance/*"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "ec2:InstanceType": [
                                        "c5.large",
                                        "c5.xlarge",
                                        "c4.large",
                                        "c4.xlarge",
                                        "t2.large",
                                        "t2.medium",
                                        "t2.small",
                                        "t2.micro"
                                    ]
                                }
                            }
                        },
* Limit route53 commands to the domain spefied during prepare step.           
* Add a github release?
* Make Overviewer Image aware of ec2 spot instance termination notice
	- poll every 5 seconds on instance metadata
	- Or just save to render cache every X minutes?
* Create a subnet for every avalability zone for compute environment so more spot instances are avalable?

* Logstreams from batch are always created in the "/aws/batch/job" log group, change this to the render log group
	- Setting the log group was currrently not possible with aws batch. Check if this has changed.