# To-Do:

*** Fix ctrl commands for mvp version ***

* Release 0.1.1
	- Prepare client configs (s3 or lan server?)
	- Deploy to clients


* Load schematics file in 1.12.2 version
  Load schematic file first! => Put schematics folder to s3 bucket. (Create s3 bucket in cloudformation template.)

* Convert Minenspass to 1.13.2
   --forceUpgrade erneut durchführen.
  JAVA_PARAM_SUFFIX=--forceUpgrade nogui
  in docker-compose.yml

* Create spigot / spigot-we docker images for 1.14.4
	- Update Minenspass to 14.4, regenerate blocks
	- Update map_ids2.txt

* Create Homepage with JS reading map_ids2.txt 

* Rename git repository to something with minecraft server and ec2.

*** MMP Version ***
* Add ECHO remark at the end of prepare batch that now the Minecraft runner aws iam user or its iam group 
should be connected to the three new policies.
- Show connection string with port number after loading a map.
- Srv tools: add flock to protect against parallel execution
- Log to AWS CloudWatch
	- Remove Log Mounts?
- Setup html page for each important maps with links and information 
- Create a central map registry as a JSON file with information on running a map.
	- information from composer.yml file
	- name of map
	- subdomain
- Add tools to add, remove, change worlds (in python!)
	- update map_ids.txt from s3 inventory?
	- remove map from s3
	- copy map to new name
	- change a maps docker image
	- change a maps server.properties?
	- change what else?
	- view map s3 history (versioning)
	- revert map from s3 history (versioning)
	- add map a from local map files
		- vanilla
		- spigot
	- What more is needed?
- Add release number for images and tags
	- Add MC release number to name of image: mc_vanilla_1-13-2:1.2-beta
- Add badges to github readme.md's
- Check and complete readme.md's


*** Luxury Features ***
- Make DNSHOSTNAME optional in run_Template.json
- DockerRunnerPolicy: Supply route53 Resource as parameter (arn:aws:route53:::hostedzone/hosted zone ID)

- Test not defining a SSH Key
	- Remove SSH (Port20)  from security group if no key given.

- Remove rediculously oversized machines from template.

- Test prepare and unprepare of stack.

- Create Policy for AppRunner User in prepare-template.json
	- Limit ec2 and other Resources, Limit to resources defined in config? 
		-> After change prepare script must be called again and policy reassigned to user.
		=> Better not.
	- Pass SSM Role 
	{
    "Effect": "Allow",
    "Action": [
        "iam:ListRoles",
        "iam:PassRole"
    ],
    "Resource": "arn:aws:iam::123456789012:role/my-role-for-XYZ"

- setup resource based policy 

*** Configuration management ***
- What to do with remaining parameters?
	- Create Batch file to create new configs with compatible software version numbers?
	  As part of setup_server.bat?
	- master configuration with code versions? (AMI IDs, etc.)
- save/secure configs
	- image building: /vagrant/set...
	- clients
	- How to distribute? Via s3, samba?
- Common config file.
	- contains docker image name -> take compose.yml out of map.tgz.
	- ?
- CF Template to create S3 Buckets -> move to overviewer project
	- mc-private/maps  (Keep secrets here?)
	- mc-render-cache/render-cache
	- mc-public/map-renders (Better keep map_ids.txt + configuration in separate Bucket?)
		- /resource-packs
		- /index.html
		- /map_ids.txt
		- /robots.txt

*** Other ***
- Setup Murmur server or use Discord?
https://hub.docker.com/r/goofball222/murmur/
https://octo.sh/container-library/murmur-docker
https://github.com/mattikus/docker-murmur

- Setup ECR

- Add CraftBook Mod to server images

- Add IPv6 support.
   - security group
   - instance ssh
   - MC server

* test spigot map will not allow client connections, why? 
	- maybe its the spigot docker image?

* Allow Remote rcon connections 
	- Is rights management for different rcon users possible?

* Unicode conversion Problem in mcrcon?
C:\Users\Rober\work\aws_mc_srv\dos_ctrl_ec2_cloudformation>cf_send_cmd.bat TEST app_cmd.sh /help
Results in => 'charmap' codec can't encode character u'\ufffd' in position 0: character maps to <undefined>

* Autosave map to s3 in map dependent intervalls

* Render_map.sh: Make number of lower tile layers to delete a parameter, currently the 2 layers are deleted.

* Explicitly create a dedicated VPC and subnets for running MC Server instead of using the default vpc and subnets.
* Does MCRenderTaskRole really need "Effect": "Allow", "Action": "batch:SubmitJob" ?
 
* docker_image_render_batch: use docker secret for google_api_key(env var GOOGLE_API_KEY_FILE)  (or remove if api key is redundant now)
* Create mcrunner user in cf prepare-template, save access key to config file?
* Common tag for all created resources of one config.
* Create docker repositories in prepare-template => images lost wenn recreated
* Create AWS test account
* docker image overviewer batch: automate mc client download depending on version requested
* batch file to check for updates & install automatically
	- Write Setup instructions
	- Upload script for package & configs
	- Check for Update on launching an instance

* Copy run-template.json to s3 and only allow creating stack with this template?
* Policy for user creating run-stack and role of created ec2 instance are mixed up. 
    => Copy to two policies and then reduce permissions in each.

RunnerPolicy removed:
                        {
                            "Effect": "Allow",
                            "Action": "ec2:RunInstances",
                            "Resource": [
                                "arn:aws:ec2:::image/ami-*"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "ec2:Owner": "amazon"
                                }
                            }
                        },     
						                        {
                            "Effect": "Allow",
                            "Action": "ec2:RunInstances",
                            "Resource": [
                                "arn:aws:ec2::*:instance/*"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "ec2:InstanceType": [
                                        "c5.large",
                                        "c5.xlarge",
                                        "c4.large",
                                        "c4.xlarge",
                                        "t2.large",
                                        "t2.medium",
                                        "t2.small",
                                        "t2.micro"
                                    ]
                                }
                            }
                        },
* Limit route53 commands to the domain spefied during prepare step.           
* Add a github release?
